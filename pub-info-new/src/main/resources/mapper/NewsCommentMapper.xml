<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ennova.pubinfonew.dao.NewsCommentMapper">
    <resultMap id="BaseResultMap" type="com.ennova.pubinfonew.entity.NewsComment">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="new_id" jdbcType="INTEGER" property="newId"/>
        <result column="comment_user_id" jdbcType="INTEGER" property="commentUserId"/>
        <result column="comment_content" jdbcType="VARCHAR" property="commentContent"/>
        <result column="div_position" jdbcType="VARCHAR" property="divPosition"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="sort_id" jdbcType="INTEGER" property="sortId"/>
    </resultMap>
    <sql id="Base_Column_List">
        id, new_id, comment_user_id, comment_content, div_position, create_time, sort_id
    </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from news_comment
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete
        from news_comment
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.ennova.pubinfonew.entity.NewsComment"
            useGeneratedKeys="true">
        insert into news_comment (new_id, comment_user_id, comment_content, create_time, sort_id)
        values (#{newId,jdbcType=INTEGER}, #{commentUserId,jdbcType=INTEGER},
                #{commentContent,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{sortId,jdbcType=INTEGER})
    </insert>
    <insert id="insertSelective" keyColumn="id" keyProperty="id"
            parameterType="com.ennova.pubinfonew.entity.NewsComment" useGeneratedKeys="true">
        insert into news_comment
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="newId != null">
                new_id,
            </if>
            <if test="commentUserId != null">
                comment_user_id,
            </if>
            <if test="commentContent != null">
                comment_content,
            </if>
            <if test="divPosition != null">
                div_position,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="sortId != null">
                sort_id,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="newId != null">
                #{newId,jdbcType=INTEGER},
            </if>
            <if test="commentUserId != null">
                #{commentUserId,jdbcType=INTEGER},
            </if>
            <if test="commentContent != null">
                #{commentContent,jdbcType=VARCHAR},
            </if>
            <if test="divPosition != null">
                #{divPosition,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="sortId != null">
                #{sortId,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.ennova.pubinfonew.entity.NewsComment">
        update news_comment
        <set>
            <if test="newId != null">
                new_id = #{newId,jdbcType=INTEGER},
            </if>
            <if test="commentUserId != null">
                comment_user_id = #{commentUserId,jdbcType=INTEGER},
            </if>
            <if test="commentContent != null">
                comment_content = #{commentContent,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="sortId != null">
                sort_id = #{sortId,jdbcType=INTEGER},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.ennova.pubinfonew.entity.NewsComment">
        update news_comment
        set new_id          = #{newId,jdbcType=INTEGER},
            comment_user_id = #{commentUserId,jdbcType=INTEGER},
            comment_content = #{commentContent,jdbcType=VARCHAR},
            create_time     = #{createTime,jdbcType=TIMESTAMP},
            sort_id         = #{sortId,jdbcType=INTEGER}
        where id = #{id,jdbcType=INTEGER}
    </update>
    <insert id="batchInsert" keyColumn="id" keyProperty="id" parameterType="map" useGeneratedKeys="true">
        insert into news_comment
        (new_id, comment_user_id, comment_content, create_time, sort_id)
        values
        <foreach collection="list" item="item" separator=",">
            (#{item.newId,jdbcType=INTEGER}, #{item.commentUserId,jdbcType=INTEGER},
            #{item.commentContent,jdbcType=VARCHAR}, #{item.createTime,jdbcType=TIMESTAMP}, #{item.sortId,jdbcType=INTEGER}
            )
        </foreach>
    </insert>
    <select id="selectCheckPerson" resultType="com.ennova.pubinfonew.vo.CurrentUserVO">
        SELECT ncp.id       userId,
               ncp.username userName,
               ncp.job_num  jobNum
        FROM news_check_person ncp
    </select>

    <update id="updateSortIdById" parameterType="java.lang.Integer">
        update news_comment
        set sort_id =((select MAX(sort_id) from (select * from news_comment) as x) + 1)
        where id = #{id,jdbcType=INTEGER}
    </update>

    <update id="updateSortIdsById" parameterType="java.lang.Integer">
        update news_comment
        set sort_id = 0
        where id = #{id,jdbcType=INTEGER}
    </update>

    <select id="selectCommentByEditionTitle" resultType="com.ennova.pubinfonew.vo.NewsCommentVO">
        select nc.id,
               nc.new_id          AS newId,
               nc.comment_user_id AS commentUserId,
               nc.comment_content AS commentContent,
               nc.div_position    AS divPosition,
               nc.create_time     AS createTime,
               nc.sort_id         AS sortId
        from news_comment nc
        where nc.is_delete = 0
        order by sortId desc, createTime desc
    </select>

    <delete id="deleteComment" parameterType="java.lang.Integer">
        update news_comment set is_delete = 1
        where id = #{id,jdbcType=INTEGER}
    </delete>

    <select id="selectCommentByNewId" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from news_comment
        <where>
            <if test="newId != null">
                and new_id = #{newId,jdbcType=INTEGER}
            </if>
        </where>
    </select>
</mapper>